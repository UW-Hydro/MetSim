#!/usr/bin/env python3

"""
Command line tool for MetSim
"""

import os
import sys
import json
import argparse
import pandas as pd
import time
from configparser import SafeConfigParser


def parse(args):
    """Parse the command line arguments"""
    parser = argparse.ArgumentParser()
    parser.add_argument('config')
    parser.add_argument('-n', '--n-processes', default=1, type=int)
    return parser.parse_args()


def init(opts):
    """Initialize some information based on the options & config"""
    if not os.path.isfile(opts.config):
        exit("Invalid configuration given.  Use `ms -h` for more information.")
    config = SafeConfigParser()
    config.optionxform = str
    config.read(opts.config)
    conf = dict(config['MetSim'])
    conf['in_vars'] = dict(config['in_vars'])
    conf['domain_vars'] = dict(config['domain_vars'])
    out_dir = conf['out_dir']
    method = conf['method']

    # If the forcing variable is a directory, scan it for files
    if os.path.isdir(conf['forcing']):
        forcing_files = [os.path.join(conf['forcing'], fn) for fn in
                         next(os.walk(conf['forcing']))[2]]
    else:
        forcing_files = conf['forcing']

    # We assume there is only one domain file
    domain_file = conf['domain']

    # Generate the date range that will be put into the data frame
    start_date, start_hour = conf['start'].split(':')
    start_year, start_month, start_day = start_date.split('/')
    end_year, end_month, end_day = conf['stop'].split('/')
    start = pd.datetime(int(start_year),
                        int(start_month),
                        int(start_day),
                        int(start_hour))
    stop = pd.datetime(int(end_year),
                       int(end_month),
                       int(end_day))

    def to_list(s):
        return json.loads(s.replace("'", '"'))

    conf.update({"stop": stop,
                 "start": start,
                 "nprocs": opts.n_processes,
                 "method": method,
                 "out_dir": out_dir,
                 "domain": domain_file,
                 "forcings": forcing_files})
    conf['out_vars'] = to_list(conf.get('out_vars', '[]'))
    conf['t_min_lr'] = float(conf['t_min_lr'])
    conf['t_max_lr'] = float(conf['t_max_lr'])
    conf = {k: v for k, v in conf.items() if v != []}
    return conf


def main():
    """Runs MetSim"""
    start = time.time()

    from metsim.metsim import MetSim
    setup = init(parse(sys.argv[1:]))
    ms = MetSim(setup)
    ms.launch(setup['forcings'])

    end = time.time()
    print('time elapsed: %s ' % (end - start))


if __name__ == '__main__':
    main()
